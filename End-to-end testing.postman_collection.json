{
	"info": {
		"_postman_id": "fd11e2dd-d56e-400c-b56a-20ce32202bb4",
		"name": "End-to-end testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40700464",
		"_collection_link": "https://grey-resonance-901404.postman.co/workspace/New-Team-Workspace~e255d05f-75b1-4611-a9f3-9dca9575058a/collection/40700464-fd11e2dd-d56e-400c-b56a-20ce32202bb4?action=share&source=collection_link&creator=40700464"
	},
	"item": [
		{
			"name": "End-to-end test",
			"item": [
				{
					"name": "[Setup] Create movie",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"duration\": 120,\r\n  \"title\": \"The Great Adventure\",\r\n  \"ageRating\": \"SIXTEEN\",\r\n  \"contentClassification\": \"TERROR\",\r\n  \"genre\": \"ACTION\",\r\n  \"description\": \"An epic adventure of a lifetime.\",\r\n  \"releaseDate\": \"2025-01-01\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/new_movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"new_movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create series",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Series response contains seriesId, totalSeasons, and currentSeason fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.seriesId).to.exist;",
									"    pm.expect(responseData.totalSeasons).to.exist;",
									"    pm.expect(responseData.currentSeason).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Title should be null\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.title).to.be.null;",
									"});",
									"",
									"",
									"pm.test(\"Episodes should be null\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.episodes).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalSeasons\": 5,\r\n    \"currentSeason\": 2,\r\n    \"title\": \"The Great Adventure\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/netflix/series/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"series",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create episode",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"episodeName\": \"Episode 1: The Beginning\",\r\n  \"description\": \"This is the first episode of the series, introducing the main characters and plot.\",\r\n  \"duration\": 45,\r\n  \"series\": {\r\n    \"seriesId\": 1\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/netflix/episodes/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"episodes",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"thu\",\r\n    \"password\": \"thutran\",\r\n    \"email\":\"thutran.mon2005@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/netflix/user/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"UserId, email, and username fields must exist in the response\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.userId).to.exist;",
									"    pm.expect(responseData.email).to.exist;",
									"    pm.expect(responseData.username).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Account lock until is null or a valid boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check if accountLockUntil is either null or a boolean value (true or false)",
									"    pm.expect(responseData.accountLockUntil).to.satisfy(val => val === null || typeof val === 'boolean');",
									"});",
									"",
									"",
									"pm.test(\"Failed login attempt is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.failedLoginAttempt).to.exist.and.to.be.a('number').and.to.satisfy(val => val >= 0, \"Value should be a non-negative integer\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 10,\r\n    \"email\": \"thutran@gmail.com\",\r\n    \"username\": \"Thu Tran\",\r\n    \"accountLockUntil\": null,\r\n    \"failedLoginAttempt\": 0,\r\n    \"activated\": false,\r\n    \"activationToken\": \"1234a\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/netflix/user/1/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"user",
								"1",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate account",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/netflix/user/activate?token=1234a",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"user",
								"activate"
							],
							"query": [
								{
									"key": "token",
									"value": "1234a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed syntax error in accessing response data\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the correct content type of application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Message field should be 'Login successful'\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.equal('Login successful');\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure that the response schema includes all expected fields for a successful login\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('token');\r",
									"    pm.expect(responseData).to.have.property('userId');\r",
									"    pm.expect(responseData).to.have.property('username');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"thutran@gmail.com\",\r\n    \"password\": \"thutran\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/netflix/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate API key",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/netflix/key/generate-key?userId=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"key",
								"generate-key"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user with ID = 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"UserId should be present and be a number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.userId).to.exist;",
									"    pm.expect(responseData.userId).to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.be.a('string');",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"});",
									"",
									"",
									"pm.test(\"Verify accountLockUntil field is null or in valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.accountLockUntil).to.satisfy((value) => {",
									"    return value === null || !isNaN(Date.parse(value));",
									"  }, \"accountLockUntil should be null or in a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/netflix/user/1?format=json",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"user",
								"1"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.subscriptionId).to.exist;",
									"    pm.expect(responseData.tier).to.exist;",
									"    pm.expect(responseData.startDate).to.exist;",
									"    pm.expect(responseData.nextBillingDate).to.exist;",
									"    pm.expect(responseData.trialPeriod).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Subscription ID is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.subscriptionId).to.be.a('number').and.to.satisfy((value) => value >= 0, \"Subscription ID should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Start date and next billing date are in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.startDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    pm.expect(responseData.nextBillingDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Tier is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.tier).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Tier should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tier\": \"UHD\",\r\n    \"startDate\": \"2025-01-01\",\r\n    \"nextBillingDate\": \"2025-02-01\",\r\n    \"isTrialPeriod\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/netflix/user/7/subscription/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"user",
								"7",
								"subscription",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('profileId');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('age');",
									"    pm.expect(responseData).to.have.property('profilePhotoUrl');",
									"    pm.expect(responseData).to.have.property('viewingHistory');",
									"});",
									"",
									"",
									"pm.test(\"Age is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.age).to.be.a('number');",
									"    pm.expect(responseData.age).to.be.at.least(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Thu\",\r\n    \"age\": 30,\r\n    \"user\": {\r\n        \"userId\": 1\r\n    },\r\n    \"profilePhotoUrl\": \"profile_photo.jpg\",\r\n    \"preferences\": [\"Action\", \"Comedy\", \"Drama\"]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/netflix/profile/create/1 ",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"profile",
								"create",
								"1 "
							]
						}
					},
					"response": []
				},
				{
					"name": "Get profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Content-Type is application/xml\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/xml\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the ProfileDto object\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.ProfileDto).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.ProfileDto.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/netflix/profile/1?format=xml",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"profile",
								"1"
							],
							"query": [
								{
									"key": "format",
									"value": "xml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All profiles of a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the schema for the response - profileId, name, age, and profilePhotoUrl\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(profile) {\r",
									"        pm.expect(profile).to.be.an('object');\r",
									"        pm.expect(profile).to.include.all.keys('profileId', 'name', 'age', 'profilePhotoUrl');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Age is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(profile => {\r",
									"        pm.expect(profile.age).to.be.a('number');\r",
									"        pm.expect(profile.age).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/netflix/profile/user/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"profile",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.subscriptionId).to.exist;",
									"    pm.expect(responseData.tier).to.exist;",
									"    pm.expect(responseData.startDate).to.exist;",
									"    pm.expect(responseData.nextBillingDate).to.exist;",
									"    pm.expect(responseData.trialPeriod).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"SubscriptionId is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.subscriptionId).to.be.a('number').and.to.satisfy((subscriptionId) => subscriptionId >= 0, \"SubscriptionId should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Start date and next billing date are in valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.startDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"  pm.expect(responseData.nextBillingDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Tier is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.tier).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Tier should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/netflix/user/1/subscription/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"user",
								"1",
								"subscription",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Movies XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/xml\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/xml\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.List).to.exist;",
									"    ",
									"    const requiredFields = [\"movieId\", \"title\", \"duration\", \"ageRating\", \"contentClassification\", \"genre\", \"description\", \"releaseDate\"];",
									"    ",
									"    requiredFields.forEach(function(field) {",
									"        pm.expect(responseData.List.item).to.be.an('array').that.is.not.empty;",
									"        responseData.List.item.forEach(function(movie) {",
									"            pm.expect(movie[field]).to.exist;",
									"        });",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Item array is present and contains expected number of elements\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.List).to.have.property('item').that.is.an('array');",
									"    pm.expect(responseData.List.item).to.have.lengthOf.at.least(1, \"Item array should contain at least one element\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/movies/allMovies?format=xml",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"movies",
								"allMovies"
							],
							"query": [
								{
									"key": "format",
									"value": "xml"
								}
							]
						},
						"description": "Get movies details in XML"
					},
					"response": []
				},
				{
					"name": "All Series JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(series) {",
									"        pm.expect(series).to.have.property('seriesId');",
									"        pm.expect(series).to.have.property('totalSeasons');",
									"        pm.expect(series).to.have.property('currentSeason');",
									"        pm.expect(series).to.have.property('title');",
									"        pm.expect(series).to.have.property('episodes');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"SeriesId should be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(series) {",
									"        pm.expect(series.seriesId).to.be.a('number').and.to.satisfy((val) => val >= 0, \"SeriesId should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"TotalSeasons is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(series) {",
									"        pm.expect(series.totalSeasons).to.exist.and.to.be.a('number').and.to.satisfy((val) => val >= 0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Episodes should be an array and empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(series) {",
									"    pm.expect(series.episodes).to.be.an('array').that.is.empty;",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/netflix/series/allSeries?format=json",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"series",
								"allSeries"
							],
							"query": [
								{
									"key": "format",
									"value": "json"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create viewing history",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"profile\": {\r\n    \"profileId\": 1\r\n  },\r\n  \"movie\": {\r\n    \"movieId\": 1\r\n  },\r\n  \"episode\": {\r\n    \"episodeId\": 1\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/netflix/viewing-history/create/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"viewing-history",
								"create",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Viewing history by profile id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/netflix/viewing-history/profile/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"viewing-history",
								"profile",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"SubscriptionId is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.subscriptionId).to.be.a('number');",
									"    pm.expect(responseData.subscriptionId).to.be.at.least(0, \"SubscriptionId should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Tier is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.tier).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Tier should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Start date and next billing date are in valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.startDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    pm.expect(responseData.nextBillingDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tier\": \"UHD\",\r\n    \"startDate\": \"2025-01-01\",\r\n    \"nextBillingDate\": \"2025-02-01\",\r\n    \"isTrialPeriod\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/netflix/user/1/subscription/1/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"user",
								"1",
								"subscription",
								"1",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/netflix/user/5/delete",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"netflix",
								"user",
								"5",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}